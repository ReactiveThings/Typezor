${
    string Verb(Method m) 
    {
        var attribute = m.Attributes.FirstOrDefault(a => a.Name.Contains("Http"));
        if(attribute == null) return string.Empty;
        return attribute.Name.Replace("Http", "").ToLower();
    }

    string AdjustedRoute(Method method)
    {
        var route = Extensions.Route(method);
        var queryString = string.Join(" + \"&", method.Parameters.Where(p => p.Attributes.Any(a => a.Name == "FromBody") == false && route.Contains(p.Name) == false)
            .Select(p => string.Format("{0}=\" + {0}", p.Name)));
        var routeExpression = "\"" + System.Text.RegularExpressions.Regex.Replace(route, @"\{(\w+):?\w*\}", delegate (System.Text.RegularExpressions.Match match)
        {
            return string.Format("\" + {0} + \"", match.Groups[1].Value);
        }) + "\"";
        if (routeExpression.EndsWith(" + \"\"")) routeExpression = routeExpression.Remove(routeExpression.Length - 5);
        return routeExpression + (string.IsNullOrEmpty(queryString) ? "" : " + \"?" + queryString);
    }

    string AdjustedParameters(Method m)
    {
        var parameters = m.Parameters.Select(p => new KeyValuePair<string, string>(p.Name, p.Type)).ToList();
        var matches = new System.Text.RegularExpressions.Regex(@"\{(\w+\:?\w+)\}").Matches(Extensions.Route(m));

        foreach (System.Text.RegularExpressions.Match match in matches)
        {
            var values = match.Groups[1].Value.Split(':');
            if (parameters.Any(p => p.Key == values[0])) continue;
            var type = "any";
            if (new[] { "decimal", "double", "float", "int", "long" }.Contains(values[1])) type = "number";
            else if (new[] { "string", "guid", "datetime" }.Contains(values[1])) type = "string";
            parameters.Add(new KeyValuePair<string, string>(values[0], type));
        }
        return string.Join(", ", parameters.Select(p => string.Format("{0}: {1}", p.Key, p.Value)));
    }
}
module App {$Classes(*Controller)[
    export class $Name {$Methods[
        public $name = ($AdjustedParameters) : Promise<$Type> => ajax("$Verb", $AdjustedRoute, { $Parameters([FromBody])[$name: $name][, ] });]
    }]
}